using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Internal;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Antelcat.
#if WPF
    Wpf
#elif AVALONIA
    Avalonia
#endif
    .I18N.SourceGenerators.Generators;

[Generator(LanguageNames.CSharp)]
internal class ResourceKeysGenerator : AttributeDetectBaseGenerator
{
    private const string Attribute            = $"{Global.Namespace}.Attributes.ResourceKeysOfAttribute";
    private const string CultureInfo          = $"global::{nameof(System)}.{nameof(System.Globalization)}.{nameof(CultureInfo)}";
    private const string ResourceProviderBase = $"global::{Global.Namespace}.Abstractions.ResourceProviderBase";

    private static readonly string[] Exceptions =
    {
        "resourceMan",
        "resourceCulture",
        ".ctor",
        "ResourceManager",
        "Culture"
    };

    protected override string AttributeName => Attribute;

    protected override void GenerateCode(SourceProductionContext context,
        ImmutableArray<(GeneratorAttributeSyntaxContext, TypeSyntax)> targets)
    {
        foreach (var (generateCtx, type) in targets)
        {
            var targetSymbol   = generateCtx.SemanticModel.GetSymbolInfo(type).Symbol as INamedTypeSymbol;
            var targetFullName = targetSymbol.GetFullyQualifiedName();
            var names          = targetSymbol!.MemberNames.Except(Exceptions).ToList();
            var nameSpace      = generateCtx.TargetSymbol.ContainingNamespace.GetFullyQualifiedName();
            var className      = $"__{targetSymbol.Name}Provider";
            var syntaxTriviaList = TriviaList(
                Comment("// <auto-generated/>"),
                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)));
            var unit = CompilationUnit()
                .AddMembers(
                    NamespaceDeclaration(IdentifierName(nameSpace.Replace("global::", "")))
                        .WithLeadingTrivia(syntaxTriviaList)
                        .AddMembers(
                            ClassDeclaration(generateCtx.TargetSymbol.Name)
                            .AddModifiers(Token(SyntaxKind.PartialKeyword))
                            .AddMembers(
                                names.Select(x =>
                                        ParseMemberDeclaration(
                                            $"""
                                             /// <summary>
                                             /// {x}
                                             /// </summary>
                                             public static string {x} = nameof({x});
                                             """
                                        )!)
                                    .ToArray())
                            .AddMembers(
                                ClassDeclaration(className)
                                    .AddModifiers(Token(SyntaxKind.PrivateKeyword))
                                    .AddBaseListTypes(SimpleBaseType(ParseTypeName(ResourceProviderBase)))
                                    .AddMembers(ParseMemberDeclaration(
                                        $$"""
                                          public override {{CultureInfo}}? Culture
                                          {
                                              get => {{targetFullName}}.Culture;
                                              set
                                              {
                                                  if (value == null) return;
                                                  if (Equals({{targetFullName}}.Culture?.EnglishName, value.EnglishName)) return;
                                                  {{targetFullName}}.Culture = value;
                                                  UpdateSource();
                                                  OnChangeCompleted();
                                              }
                                          }
                                          """
                                        )!)
                                    .AddMembers(ParseMemberDeclaration(
                                        $$"""
                                          private void UpdateSource()
                                          {
                                          {{string.Concat(names.Select(x => 
                                              $"\tOnPropertyChanged(nameof({x}));\n"
                                          ))}}
                                          }
                                          """
                                        )!)
                                    .AddMembers(names.Select(x =>
                                            ParseMemberDeclaration($"public string {x} => {targetFullName}.{x};")!)
                                        .ToArray())
                            )
                        )
                ).NormalizeWhitespace();
          
            context.AddSource($"{generateCtx.TargetSymbol.GetFullyQualifiedName().Replace("global::", "")}.g.cs",
                unit.GetText(Encoding.UTF8));
           
        }
    }
}